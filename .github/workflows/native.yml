name: Native

on: [ push, workflow_dispatch ]

env:
  BUILD_TYPE: Debug
  PROJECT_SUBDIR: sgbmandroid/src/main/cpp
  BUILD_SUBDIR: build

defaults:
  run:
    shell: bash
    working-directory: sgbmandroid/src/main/cpp  # Must be the same as env.PROJECT_SUBDIR

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      compile-commands: ${{steps.configure-cmake.outputs.compile-commands}}

    steps:
      - uses: actions/checkout@v3

      - uses: hendrikmuhs/ccache-action@v1.2

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: ${{github.workspace}}/${{env.PROJECT_SUBDIR}}/${{env.BUILD_SUBDIR}}
          key: ${{runner.os}}-build-cache-simple

      - name: Configure CMake
        id: configure-cmake
        run: |
          cmake -B ${{env.BUILD_SUBDIR}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DBUILD_EXAMPLES=ON
          echo "::set-output name=compile-commands::$(base64 -w 0 ${{env.BUILD_SUBDIR}}/compile_commands.json)"

      - name: Build
        run: cmake --build ${{env.BUILD_SUBDIR}} --config ${{env.BUILD_TYPE}}

  build-java-bridge:
    runs-on: ubuntu-latest

    env:
      CC: clang
      CXX: clang++

    steps:
      - uses: actions/checkout@v3

      - uses: hendrikmuhs/ccache-action@v1.2

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: ${{github.workspace}}/${{env.PROJECT_SUBDIR}}/${{env.BUILD_SUBDIR}}
          key: ${{runner.os}}-build-cache-bridge

      - name: Configure CMake
        run: cmake -B ${{env.BUILD_SUBDIR}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DSCAPIX_BRIDGE=java

      - name: Build
        run: cmake --build ${{env.BUILD_SUBDIR}} --config ${{env.BUILD_TYPE}}

  lint:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Prepare compile commands
        run: |
          mkdir -p ${{env.BUILD_SUBDIR}}
          echo ${{needs.build.outputs.compile-commands}} | base64 -d > ${{env.BUILD_SUBDIR}}/compile_commands.json

      - name: Configure linters
        run: |
          pip install cpplint
          sudo apt-get install clang-tidy

      - name: Run cpplint
        run: cpplint --recursive .

      - name: Run clang-tidy
        run: run-clang-tidy -p ${{env.BUILD_SUBDIR}}
